{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "ITSM_Test_1011_02",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "v1"
  },
  "servers" : [ {
    "url" : "http://cobien-dev:5555/gateway/ITSM_Test_1011_02/v1"
  }, {
    "url" : "http://cobien-dev:5555/FRWSX"
  }, {
    "url" : "http://cobien-dev:5555/VFEWE"
  } ],
  "tags" : [ {
    "name" : "pet",
    "description" : "Everything about your Pets",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "store",
    "description" : "Access to Petstore orders",
    "externalDocs" : {
      "description" : "Find out more about our store",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "user",
    "description" : "Operations about user"
  } ],
  "paths" : {
    "/user/logout/REV_3/PSR_02" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "description" : "",
        "operationId" : "logoutUser",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "parameters" : [ ]
    },
    "/pet" : {
      "get" : {
        "tags" : [ "pet" ],
        "summary" : "PSR_01PSR_01PSR_01PSR_01PSR_01",
        "description" : "PSR_01PSR_01PSR_01PSR_01PSR_01PSR_01PSR_01PSR_01",
        "operationId" : "PSR_01",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "put" : {
        "tags" : [ "pet" ],
        "summary" : "Update an existing pet",
        "description" : "Update an existing pet by Id",
        "operationId" : "updatePet",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Update an existent pet in the store",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      },
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "Add a new pet to the store",
        "description" : "Add a new pet to the store",
        "operationId" : "addPet",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Create a new pet in the store",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Pet"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "parameters" : [ ]
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing. ",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Update user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be deleted",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Update an existent user in the store",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "parameters" : [ ]
    },
    "/REV_3/PSR_02_2" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : false,
          "allowEmptyValue" : false
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : false,
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      },
      "parameters" : [ ]
    },
    "/pet/findByStatus" : {
      "get" : {
        "tags" : [ "pet" ],
        "summary" : "Finds Pets by status11",
        "description" : "Multiple status values can be provided with comma separated strings111!",
        "operationId" : "findPetsByStatu111 !",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "available", "pending", "sold" ],
            "default" : "available"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      },
      "put" : {
        "tags" : [ "pet" ],
        "summary" : "Finds Pets by status11",
        "description" : "Multiple status values can be provided with comma separated strings111!",
        "operationId" : "findPetsByStatu111 !",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "available", "pending", "sold" ],
            "default" : "available"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      },
      "parameters" : [ ]
    },
    "/user/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "Creates list of users with given input array",
        "operationId" : "createUsersWithListInput",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "parameters" : [ ]
    },
    "/pet/{petId}/uploadImage" : {
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "uploads an image",
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet to update",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "additionalMetadata",
          "in" : "query",
          "description" : "Additional Metadata",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/REV_2/PSR_02_1" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : false,
          "allowEmptyValue" : false
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : false,
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      },
      "parameters" : [ ]
    },
    "/store/inventory" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Returns pet inventories by status",
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                }
              }
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "default" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "parameters" : [ ]
    },
    "/pet/findByTags" : {
      "get" : {
        "tags" : [ "pet" ],
        "summary" : "Finds Pets by tags",
        "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId" : "findPetsByTags",
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        }
      },
      "parameters" : [ ]
    },
    "/store/order" : {
      "post" : {
        "tags" : [ "store" ],
        "summary" : "Place an order for a pet",
        "description" : "Place a new order in the store",
        "operationId" : "placeOrder",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "parameters" : [ ]
    },
    "/pet/{petId}" : {
      "get" : {
        "tags" : [ "pet" ],
        "summary" : "Find pet by ID",
        "description" : "Returns a single pet",
        "operationId" : "getPetById",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet to return",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        }
      },
      "post" : {
        "tags" : [ "pet" ],
        "summary" : "Updates a pet in the store with form data",
        "operationId" : "updatePetWithForm",
        "parameters" : [ {
          "name" : "petId",
          "in" : "path",
          "description" : "ID of pet that needs to be updated",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name of pet that needs to be updated",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Status of pet that needs to be updated",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "delete" : {
        "tags" : [ "pet" ],
        "summary" : "Deletes a pet",
        "description" : "delete a pet",
        "operationId" : "deletePet",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "petId",
          "in" : "path",
          "description" : "Pet id to delete",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid pet value"
          }
        }
      },
      "parameters" : [ ]
    },
    "/REV_2/PSR_01" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : false,
          "allowEmptyValue" : false
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : false,
          "allowEmptyValue" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      },
      "parameters" : [ ]
    },
    "/store/order/{orderId}" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Find purchase order by ID",
        "description" : "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId" : "getOrderById",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of order that needs to be fetched",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "store" ],
        "summary" : "Delete purchase order by ID",
        "description" : "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of the order that needs to be deleted",
          "required" : true,
          "allowEmptyValue" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "parameters" : [ ]
    }
  },
  "components" : {
    "schemas" : {
      "Order" : {
        "type" : "object",
        "properties" : {
          "petId" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 198772
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 7
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 10
          },
          "complete" : {
            "type" : "boolean"
          },
          "shipDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Order Status",
            "example" : "approved",
            "enum" : [ "placed", "approved", "delivered" ]
          }
        },
        "xml" : {
          "name" : "order"
        }
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Dogs"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 1
          }
        },
        "xml" : {
          "name" : "category"
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "example" : "James"
          },
          "password" : {
            "type" : "string",
            "example" : "12345"
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32",
            "example" : 1
          },
          "phone" : {
            "type" : "string",
            "example" : "12345"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 10
          },
          "email" : {
            "type" : "string",
            "example" : "john@email.com"
          },
          "username" : {
            "type" : "string",
            "example" : "theUser"
          }
        },
        "xml" : {
          "name" : "user"
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "zip" : {
            "type" : "string",
            "example" : "94301"
          },
          "city" : {
            "type" : "string",
            "example" : "Palo Alto"
          },
          "street" : {
            "type" : "string",
            "example" : "437 Lytton"
          },
          "state" : {
            "type" : "string",
            "example" : "CA"
          }
        },
        "xml" : {
          "name" : "address"
        }
      },
      "Customer" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "xml" : {
              "name" : "addresses",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100000
          },
          "username" : {
            "type" : "string",
            "example" : "fehguy"
          }
        },
        "xml" : {
          "name" : "customer"
        }
      },
      "FGG" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "xml" : {
              "name" : "addresses",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100000
          },
          "username" : {
            "type" : "string",
            "example" : "fehguy"
          }
        },
        "xml" : {
          "name" : "customer"
        }
      },
      "Tag" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "xml" : {
          "name" : "tag"
        }
      },
      "REV2_PSR03" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "xml" : {
              "name" : "addresses",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100000
          },
          "username" : {
            "type" : "string",
            "example" : "fehguy"
          }
        },
        "xml" : {
          "name" : "customer"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "##default"
        }
      },
      "Pet" : {
        "required" : [ "name", "photoUrls" ],
        "type" : "object",
        "properties" : {
          "photoUrls" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "type" : "string",
              "xml" : {
                "name" : "photoUrl"
              }
            }
          },
          "name" : {
            "type" : "string",
            "example" : "doggie"
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 10
          },
          "category" : {
            "$ref" : "#/components/schemas/Category"
          },
          "status" : {
            "type" : "string",
            "description" : "pet status in the store",
            "enum" : [ "available", "pending", "sold" ]
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          }
        },
        "xml" : {
          "name" : "pet"
        }
      },
      "REV2_PSR02" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "xml" : {
              "name" : "addresses",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100000
          },
          "username" : {
            "type" : "string",
            "example" : "fehguy"
          }
        },
        "xml" : {
          "name" : "customer"
        }
      },
      "REV2_PSR01" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "array",
            "xml" : {
              "name" : "addresses",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 100000
          },
          "username" : {
            "type" : "string",
            "example" : "fehguy"
          }
        },
        "xml" : {
          "name" : "customer"
        }
      }
    },
    "requestBodies" : {
      "UserArray" : {
        "description" : "List of user object",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        }
      },
      "Pet" : {
        "description" : "Pet object that needs to be added to the store",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Pet"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "petstore_auth" : {
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "https://petstore3.swagger.io/oauth/authorize",
            "scopes" : {
              "read:pets" : "read your pets",
              "write:pets" : "modify pets in your account"
            }
          }
        }
      },
      "api_key" : {
        "name" : "api_key"
      }
    }
  }
}